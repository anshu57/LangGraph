What is Gen AI ?
Gen AI refers to a class of Artificial Intelligence models that can create 
new content - such as text, images, audio, code,or Video - that 
resembles human - created data.



LLMs based apps like ChatGpt

Diffusion models for images

Code generating LLMs like CodeLLama
TTS models like ElevenLabs

Video gen models like Sora



Gen AI VS Traditional AI :

Traditional AI is about finding patterns in data and giving predictions.

Gen AI is about learning the distribution of data so that it can generate a 
new sample from it.
The best part of Gen AI is that it can mimic humans

Application Areas:

Creative and Business Writing
Software Development
Customer Support
Education
Designing


Goal - To hire a backend engineer!
 creating a JD
 Posting the JD to a job platform
 Shortlisting
 Interviewing
 Rolling an offer letter
 Onboarding

 

 What is Agentic AI?
 Agentic Ai is a type of AI that take up a task or goal from a user and then work toward 
 completing it on its own, with minimal human guidance.
 It plans, takes action, adapts to changes, and seeks help only when necessary.


Agentic AI Characteristics -
  Autonomous
  Goal Oriented
  Planning
  Reasoning
  Adaptability
  Context Awareness


Autonomy : it refers to AI system's ability to make decisions and take 
actions on its own to achieve goal, without needing step-by-step human instructions.

Goal Oriented : AI system operates with a persistent objective in mind and continuosly
directs its actions to achieve that objective, rather than just responding to 
isolated prompts.

Planning : Planning is the agent's ability to break down high-level goal into structured sequence of
actions or subgoals and decide the best path to achieve the desired outcome.

Reasoning : it is the cognitive process through which an Agentic ai system interprets
information, draws conclusions, and makes decisions - both while planning ahead and while executing
actions in real time.

Adaptibility : it is the agent's ability to modify its plans, strategies, or actions in response
to unexpected conditions - all while staying aligned with goal.

Context Awareness : it is the agent's ability to understand, retain, and utilize relevant information
from the ongoing task, past interactions, user prefences, and environmental cues to make
better decisions throughout a multi-step process.


Components of Agentic system
 Brain - Generally LLM
 Orchestrator - LangGraph
 Tools - 
 Memory - 
 Supervisor - HITL



LangChain VS LangGraph

- LangChain do not have nested worlflows
- LangChain do not have Human in loop
- LangChain do not have event based pause, LangChain has to add Glue code.
- LangGraph is fault Tolerant

LangGraph is an Orchestration framework that enables you to build 
stateful, multi-step and event-driven workflows using LLM workflows.
it enables advanced features like parallelism, loops, branching, memory, and 
resumability - making it ideal for agentic and production-grade AI applications.
it models your logic as a graph of nodes(tasks) and edges(routing) instead of a linear
chain.


1. LLM workflows:
  I. these are step by step process using which we can build complex LLM applications.
  II. Each step in a workflow performs a distinct task - such as prompting, Reasoning,
  tool calling, memory access, or decision-making.
  III. Workflows can be linear, parallel, branched, or looped, allowing for complex behaviurs
  like retries, multi-agent communication, or tool-augmented reasoning.
  IV. Common workflows:
  - Prompt chaining 
  - routing
  - Parallelization
  - Orchestrator Workers workflow
  

2. Graphs, Nodes and Edges:
  Graph is overall structure and flow of an agent's operations. it is 
  stateful entity, i.e. it maintains a shared state that is passed
  between nodes and updated as the computation progresses.
   
  Nodes are the fundamental building blocks within a LangGraph. 
  Each node encapsulates a specific piece of logic or a computational step. 
  This can be anything from simple data processing functions, interactions 
  with external APIs, or calls to Large Language Models (LLMs). 
  Nodes receive the current graph state as input, perform their designated task, 
  and can return an updated state.
  
  Edges define the connections and flow of execution between nodes in a graph. 
  They dictate which node will be executed next based on the current state. 
  LangGraph supports two main types of edges:
    Fixed Edges: These establish a direct, unconditional transition from one node to another.
    Conditional Edges: These allow for dynamic routing, where the next node to execute 
    depends on the current state is determined by a function that evaluates the 
    current state and returns the name of the appropriate next node.
    This enables complex decision-making and branching within the agent's workflow.


3. State:
   It represents a shared data structure that captures the current snapshot of your application
   at any given moment during the execution of a graph.


4. Reducers:
   These are functions that define how updates from nodes are applied to shared state of the graph.
   Each key in the state can have its own Reducer, which determines whether new data replaces,
   merges, or adds to the existing value.

   

   
   